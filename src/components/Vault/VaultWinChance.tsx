import { PrizePool, Vault } from "@generationsoftware/hyperstructure-client-js";
import {
  useLastAwardedDrawId,
  useVaultContributionAmount,
} from "@generationsoftware/hyperstructure-react-hooks";
import { Spinner, Tooltip } from "@shared/ui";
import classNames from "classnames";
import { useTranslations } from "next-intl";
import { useMemo } from "react";
import { useSupportedPrizePools } from "@hooks/useSupportedPrizePools";
import { useVaultWinChance } from "@hooks/useVaultWinChance";

interface VaultWinChanceProps {
  vault: Vault;
  className?: string;
  fallbackClassName?: string;
  tooltipClassName?: string;
  winChance?: any;
}

export const VaultWinChance = (props: VaultWinChanceProps) => {
  const { vault, className, fallbackClassName, tooltipClassName, winChance } =
    props;

  // const { data: winChance, isFetched: isFetchedWinChance } = useVaultWinChance(vault, {
  //   capMaxPrizeYieldConsidered: 100
  // })

  const prizePools = useSupportedPrizePools();
  const prizePool = Object.values(prizePools).find(
    (pool) => pool.chainId === vault.chainId
  );

  const { data: lastAwardedDrawId } = useLastAwardedDrawId(
    prizePool as PrizePool
  );

  const { data: totalContributions } = useVaultContributionAmount(
    prizePool as PrizePool,
    vault,
    lastAwardedDrawId
  );

  // if (!isFetchedWinChance) {
  //   return <Spinner />
  // }

  // if (winChance === undefined) {
  //   return <>?</>;
  // }

  if (
    lastAwardedDrawId === 0 ||
    (lastAwardedDrawId !== undefined && totalContributions === 0n)
  ) {
    return (
      <span className="flex gap-1 items-center text-sm text-pt-purple-200">
        {winChance} %
      </span>
    );
  }

  return (
    <span className="flex gap-1 items-center text-sm text-pt-purple-200">
      {winChance?.toString()} %
    </span>
  );
};

interface WinChanceGraphicProps {
  winChance: number;
  className?: string;
  tooltipClassName?: string;
}

const WinChanceGraphic = (props: WinChanceGraphicProps) => {
  const { winChance, className, tooltipClassName } = props;

  const t = useTranslations("Tooltips.winChanceChart");

  const fill = (minWinChance: number) => {
    return !!winChance && winChance >= minWinChance ? "#B18CFF" : "#F5F0FF1A";
  };

  const tooltipContent = useMemo(() => {
    if (winChance >= 0.75) {
      return t("highest");
    } else if (winChance >= 0.5) {
      return t("high");
    } else if (winChance >= 0.25) {
      return t("average");
    } else if (winChance >= 0.1) {
      return t("low");
    } else if (winChance > 0) {
      return t("lowest");
    } else {
      return t("none");
    }
  }, [winChance]);

  return (
    <span className="flex gap-1 items-center text-sm text-pt-purple-200">
      {winChance} %
    </span>
  );
};

interface NewFallbackGraphicProps {
  className?: string;
}

// const NewFallbackGraphic = (props: NewFallbackGraphicProps) => {
//   const { className } = props;

//   return     <span className="flex gap-1 items-center text-sm text-pt-purple-200">

//   {}
// </span>
//   // return (
//   //   <svg
//   //     xmlns="http://www.w3.org/2000/svg"
//   //     viewBox="0 0 140 140"
//   //     shapeRendering="geometricPrecision"
//   //     textRendering="geometricPrecision"
//   //     className={className}
//   //   >
//   //     <g transform="translate(-44.1485-38.3109)">
//   //       <path
//   //         d="M113.44514,175.79805c-.37378-.14911-1.6463-2.13578-3.67373-5.73545-1.70603-3.02902-3.28716-5.65613-3.51361-5.83803s-.79592-.33073-1.26547-.33073c-.73654,0-1.5014.59859-5.571829,4.3606-4.02389,3.71899-4.84183,4.36133-5.55909,4.36562-.8731.005-1.53193-.45804-1.78489-1.25507-.0809-.25477-.66962-3.06413-1.30835-6.24303-1.25163-6.2293-1.53597-6.88067-2.99637-6.86418-.40827.005-3.23305,1.15554-6.27729,2.55763s-5.81245,2.54926-6.15157,2.54926c-.76639,0-1.6749-.8742-1.6749-1.61165c0-.30432.30624-3.17902.68055-6.38821s.61053-6.11385.52496-6.4548-.45651-.81707-.82431-1.05806c-.62762-.41123-1.04609-.39498-6.80882.26452-3.37705.38648-6.34845.70121-6.60311.6994-.66121-.005-1.52136-.9535-1.52136-1.67819c0-.33911,1.14717-3.10732,2.54926-6.15156s2.55303-5.86903,2.55764-6.27729c.0165-1.4604-.63489-1.74474-6.86418-2.99638-3.1789-.63872-5.98826-1.22748-6.24303-1.30834-.79827-.25336-1.26042-.91241-1.25164-1.7849.007-.71502.66114-1.54812,4.36562-5.56164c3.75199-4.06498,4.35717-4.83887,4.35717-5.57183c0-.46815-.14883-1.03646-.33073-1.26291s-2.80802-1.80702-5.83582-3.51236c-7.86514-4.42986-7.86408-4.31462-.0797-8.72541c2.98568-1.69175,5.6125-3.25988,5.83736-3.48475s.40885-.806132.40885-1.291702c0-.77391-.53769-1.4654-4.35716-5.6035-3.70449-4.01352-4.35843-4.84662-4.36563-5.56164-.009-.87249.45338-1.53154,1.25164-1.7849.25477-.0809,3.06414-.66961,6.24303-1.30834c6.2293-1.25164,6.88067-1.53598,6.86419-2.99638-.005-.40826-1.15555-3.23304-2.55764-6.27728s-2.54926-5.81245-2.54926-6.15156c0-.76639.8742-1.674915,1.61165-1.674915.30432,0,3.17902.30625,6.38821.680555s6.11386.61054,6.4548.52497.81707-.45651,1.05806-.824315c.41124-.62763.39498-1.0461-.26452-6.80882-.38648-3.37705-.70121-6.34845-.6994-6.60312.005-.6612.95351-1.52135,1.67819-1.52135.33911,0,3.10732,1.14717,6.15156,2.54926s5.86903,2.55303,6.27729,2.55764c1.4604.0165,1.74474-.63489,2.99638-6.86419.63873-3.17889,1.22748-5.98826,1.30834-6.24303.25297-.79703.91179-1.26029,1.7849-1.25507.71725.004,1.5352.64663,5.55909,4.36562c4.070419,3.76201,4.835289,4.3606,5.571819,4.3606.46956,0,1.03902-.14882,1.26547-.33073s1.80702-2.80802,3.51236-5.83582c4.44764-7.8967,4.3437-7.8988,8.88799.18005c1.70862,3.03758,3.26835,5.62537,3.46606,5.75064s.73549.22958,1.19507.23181c.71508.003,1.51649-.62441,5.55625-4.35311c3.93081-3.62815,4.85606-4.35858,5.52997-4.36563c1.54295-.0161,1.64541.22088,3.01637,6.97701c1.37685,6.78515,1.63399,7.39663,3.10492,7.3837.40826-.004,3.23524-1.15452,6.28216-2.55764s5.81513-2.55111,6.15157-2.55111c.76219,0,1.67003.8761,1.67003,1.61165c0,.30432-.30625,3.17902-.68055,6.38821s-.61054,6.11386-.52497,6.4548.45651.817075.82431,1.058065c.62763.41124,1.0461.39498,6.80882-.26452c3.37705-.386475,6.34846-.701215,6.60312-.699405.6612.005,1.52135.953515,1.52135,1.678195c0,.33911-1.14717,3.10732-2.54926,6.15156s-2.55303,5.86902-2.55764,6.27728c-.0165,1.4604.63489,1.74474,6.86419,2.99638c3.17889.63873,5.98826,1.22748,6.24303,1.30834.79774.25319,1.26036.91215,1.2531,1.7849-.006.71545-.65767,1.54742-4.36563,5.57311-3.73521,4.05527-4.35862,4.85282-4.35862,5.5761c0,.4642.20836,1.057652.46302,1.318792s2.84427,1.8125,5.75469,3.44746c3.8102,2.14043,5.3883,3.1686,5.63683,3.67253.66244,1.34319.0992,1.84998-5.63683,5.07229-2.91042,1.63497-5.50003,3.18632-5.75469,3.44746s-.46302.8546-.46302,1.31879c0,.72328.62341,1.52083,4.35862,5.57611c3.70796,4.02569,4.35967,4.85765,4.36563,5.5731.007.87275-.45536,1.53171-1.2531,1.7849-.25477.0809-3.06414.66962-6.24303,1.30834-6.2293,1.25164-6.88067,1.53598-6.86419,2.99638.005.40826,1.15555,3.23305,2.55764,6.27729s2.54926,5.81245,2.54926,6.15156c0,.72469-.86015,1.6735-1.52135,1.67819-.25466.002-3.22607-.31292-6.60312-.6994-5.76272-.6595-6.18119-.67575-6.80882-.26452-.3678.24099-.73874.71712-.82431,1.05806s.15067,3.2456.52497,6.4548.68055,6.08389.68055,6.38821c0,.73556-.90784,1.61165-1.67003,1.61165-.33644,0-3.10464-1.148-6.15157-2.55111s-5.8739-2.55405-6.28216-2.55764c-1.4611-.0128-1.74488.63743-2.99638,6.86604-.63873,3.1789-1.22748,5.98826-1.30834,6.24303-.25336.79826-.91241,1.26041-1.7849,1.25164-.71502-.007-1.54812-.66114-5.56164-4.36563-4.06498-3.75198-4.83887-4.35716-5.57183-4.35716-.46815,0-1.03786.14883-1.26602.33073s-1.74717,2.71198-3.37555,5.62239-3.10158,5.42772-3.27375,5.594c-.47503.45877-1.30574.61143-1.94324.35709ZM81.720711,126.18574c1.15475-.22096,2.13049-.4327,2.16831-.47052s-.50989-3.33959-1.21714-7.33726-1.2593-7.29531-1.22677-7.32809s2.71634,2.92099,5.96403,6.56392s6.04634,6.56924,6.21923,6.5029s1.22941-.26824,2.34783-.44866c1.35831-.21912,2.0335-.44559,2.0335-.68206c0-.49936-3.9844-22.96056-4.09208-23.068242-.0487-.0487-1.05284.0592-2.23152.239602-1.78535.27331-2.14306.4093-2.14306.81471c0,.26766.54165,3.53343,1.20367,7.25728s1.16445,6.88827,1.11652,7.03205-2.67759-2.66205-5.8437-6.23518-5.85535-6.55765-5.97608-6.63227c-.20544-.12697-4.49891.53314-4.68628.72051-.0844.0844,3.79613,22.49537,4.00721,23.14243.0593.1819.14138.33071.18233.33068s1.01925-.18083,2.174-.4018Zm31.601389-5.57441c4.60229-.81309,8.41537-1.52541,8.47349-1.58293.10129-.10025-.45581-3.85935-.59217-3.9957-.0364-.0364-2.68026.396-5.87525.96087s-6.10612,1.06626-6.46915,1.11418c-.63757.0842-.67541.002-1.11103-2.42641-.24804-1.38245-.45703-2.75931-.46442-3.05969-.0124-.50488.41004-.62091,5.59081-1.53541c3.08234-.54409,5.68408-1.0386,5.78164-1.09889.15269-.0944-.41799-3.79921-.61567-3.99689-.0394-.0394-2.6276.38799-5.75163.94968s-5.73959.96264-5.81235.89101c-.15418-.15177-.99859-4.84981-.87169-4.84981.22835,0,12.39017-2.185932,12.4493-2.237602.0942-.0823-.62342-3.82973-.75948-3.96579-.0604-.0604-3.97775.57853-8.70515,1.41991-7.79859,1.38799-8.591359,1.57635-8.55301,2.03215.0581.6908,3.79981,22.117692,3.93414,22.528932.0594.18191.30508.33073.54592.33073s4.2034-.66525,8.8057-1.47834Zm20.16732-3.5576l2.00992-.31523.46218-5.46035c.2542-3.00319.59989-7.05614.76821-9.00655l.30602-3.546192l3.66084,7.911822c2.01347,4.3515,3.75965,8.01493,3.8804,8.14096.21673.22621,4.48823-.28876,4.97657-.59996.29329-.1869,1.82881-23.999912,1.56461-24.264112-.20896-.20897-4.18532.40291-4.51162.69425-.12034.10743-.36963,3.72358-.55399,8.03588s-.38356,7.886952-.44267,7.943662-1.58669-3.21875-3.39462-7.278812-3.35574-7.38445-3.43958-7.38753-1.36851.1989-2.85481.44884c-2.53513.42631-2.7103.49624-2.83048,1.13008-.0705.3716-.3951,3.97265-.72141,8.002332s-.6718,7.27818-.76775,7.21888-1.45839-3.23725-3.02766-7.06211-2.94523-7.056232-3.05768-7.180822c-.19105-.21167-3.54769.22605-4.53465.59134-.37847.14008.19144,1.62994,3.85821,10.086232c2.36625,5.45703,4.55949,10.50055,4.87387,11.20782.48712,1.09589.65988,1.26518,1.16888,1.14538.32851-.0773,1.50175-.28243,2.60721-.45581Z"
//   //         fill="#B18CFF"
//   //       />
//   //     </g>
//   //   </svg>
//   // );
// };
